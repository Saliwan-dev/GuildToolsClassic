GT_SynchronizerFactory:CreateSynchronizer("GT_HC_SF",
    function() return GT_SavedData.selffoundHistory end,
    function(historyEntry)
        if not IsInTable(GT_SavedData.selffoundHistory, historyEntry) then
            table.insert(GT_SavedData.selffoundHistory, historyEntry)
            GT_EventManager:PublishEvent("REROLL_UPDATED_FROM_GUILD")
        end
    end,
    {"SELFFOUND_MODIFIED"})

-- HASH

--local hashCache = nil
--
--local function GetHardcoreHistoryHash()
--    if hashCache ~= nil then
--        return hashCache
--    end
--
--    local m = md5.new()
--
--    local stringToHash = ""
--    for index, savedEntry in ipairs(GT_SavedData.selffoundHistory) do
--        stringToHash = stringToHash..savedEntry
--    end
--
--    local hashAsInt = 0
--    for char = 0, string.len(stringToHash) do
--        hashAsInt = hashAsInt + string.byte(stringToHash)
--    end
--
--    hashCache = tostring(hashAsInt)
--
--    return hashCache
--end
--
--local function InvalidateHash()
--    hashCache = nil
--end
--
---- SEND
--
--GT_EventManager:AddEventListener("SELFFOUND_MODIFIED", function(historyEntry)
--    InvalidateHash()
--    ChatThrottleLib:SendAddonMessage("NORMAL", PREFIX, "NEW_EVENT:"..historyEntry, "GUILD")
--end)
--
--local function SendAllData()
--    for index, historyEntry in ipairs(GT_SavedData.selffoundHistory) do
--        ChatThrottleLib:SendAddonMessage("BULK", PREFIX, "NEW_EVENT:"..historyEntry, "GUILD")
--    end
--end
--
---- RECEIVE
--
--local playerNameByHash = {}
--local syncNeeded = false
--
--local eventHandler = CreateFrame("Frame")
--eventHandler:RegisterEvent("PLAYER_ENTERING_WORLD")
--eventHandler:RegisterEvent("CHAT_MSG_ADDON")
--eventHandler:SetScript("OnEvent", function(self, event, ...)
--    if event == "CHAT_MSG_ADDON" then
--        local prefix, message = ...
--        if prefix ~= PREFIX then
--            return
--        end
--
--        print("[GT]".."["..prefix.."]"..message)
--
--        local splitedMessage = StringSplit(message, ":")
--        local messageType = unpack(splitedMessage)
--        if messageType == "NEW_EVENT" then
--            local _, time, eventType, fromPlayer = unpack(splitedMessage)
--
--            if eventType == "SET_SELFFOUND" then
--                local _, _, _, _, name, isSelffound = unpack(splitedMessage)
--
--                local historyEntry = time..":"..eventType..":"..fromPlayer..":"..name..":"..isSelffound
--
--                if not IsInTable(GT_SavedData.selffoundHistory, historyEntry) then
--                    table.insert(GT_SavedData.selffoundHistory, historyEntry)
--                    GT_EventManager:PublishEvent("REROLL_UPDATED_FROM_GUILD")
--                end
--            end
--        end
--
--        if messageType == "CHECK_SYNC" then
--            ChatThrottleLib:SendAddonMessage("NORMAL", PREFIX, "MY_HASH:"..UnitName("player")..":"..GetHardcoreHistoryHash(), "GUILD")
--            playerNameByHash = {}
--            syncNeeded = false
--        end
--
--        if StartWith(message, "MY_HASH") then
--            local messageType, playerName, hash = unpack(StringSplit(message, ":"))
--
--            if playerNameByHash[hash] == nil then
--                playerNameByHash[hash] = {}
--            end
--
--            table.insert(playerNameByHash[hash], playerName)
--
--            if syncNeeded == false and hash ~= GetHardcoreHistoryHash() then
--                syncNeeded = true
--                C_Timer.After(5, function()
--                    table.sort(playerNameByHash[GetHardcoreHistoryHash()])
--                    if playerNameByHash[GetHardcoreHistoryHash()][1] == UnitName("player") then
--                        SendAllData()
--                    end
--                end)
--            end
--        end
--
--    elseif event == "PLAYER_ENTERING_WORLD" then
--        local isLogin, isReload = ...
--        if isLogin or isReload then
--            C_ChatInfo.RegisterAddonMessagePrefix(PREFIX)
--        end
--
--        ChatThrottleLib:SendAddonMessage("BULK", PREFIX, "CHECK_SYNC", "GUILD")
--    end
--end)